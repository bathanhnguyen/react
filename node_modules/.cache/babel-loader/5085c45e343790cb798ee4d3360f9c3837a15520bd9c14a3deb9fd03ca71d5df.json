{"ast":null,"code":"// import axios from 'axios';\n// import React, { useState, useEffect } from 'react';\n// import DatePicker from 'react-datepicker';\n// import 'react-datepicker/dist/react-datepicker.css';\n// import styled from 'styled-components';\n\n// function BookingForm() {\n//     const [fromDateTime, setFromDateTime] = useState(null);\n//     const [toDateTime, setToDateTime] = useState(null);\n//     const [bookedDates, setBookedDates] = useState([]);\n\n//     useEffect(() => {\n//         let config = {\n//             method: 'get',\n//             maxBodyLength: Infinity,\n//             url: 'http://localhost/car/KLTN/carrentalAPI/Get_DateBooking.php?vid=2',\n//             headers: {},\n//         };\n\n//         axios\n//             .request(config)\n//             .then((response) => {\n//                 if (response.data.status === '200') {\n//                     setBookedDates(response.data.date);\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.log(error);\n//             });\n//     }, []);\n\n//     const handleDateTimeChange = (selectedDateTime, field) => {\n//         if (field === 'from') {\n//             setFromDateTime(selectedDateTime);\n//             setToDateTime(null); // Reset toDateTime when changing fromDateTime\n//         } else if (field === 'to') {\n//             setToDateTime(selectedDateTime);\n//         }\n//     };\n\n//     const handleBooking = () => {\n//         console.log('From Date/Time:', fromDateTime);\n//         console.log('To Date/Time:', toDateTime);\n//     };\n\n//     const isBookedDateTime = (dateTime) => {\n//         return bookedDates.includes(dateTime.toISOString());\n//     };\n\n//     const renderDateTime = (dateTime) => {\n//         const isBooked = isBookedDateTime(dateTime.toISOString());\n//         const isFutureDateTime = dateTime > new Date();\n\n//         const dateTimeClassName = isBooked ? 'booked-date-time' : '';\n//         const additionalClass = isFutureDateTime ? '' : 'disabled-date-time';\n\n//         return (\n//             <div className={`custom-date-time ${dateTimeClassName} ${additionalClass}`}>\n//                 {dateTime.toLocaleString()}\n//             </div>\n//         );\n//     };\n\n//     const excludeDates = bookedDates.map((dateTime) => new Date(dateTime));\n//     const today = new Date();\n//     const minDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n\n//     const filterPassedDateTime = (dateTime) => {\n//         return dateTime > fromDateTime || !fromDateTime; // Hiển thị ngày/giờ sau fromDateTime hoặc không có fromDateTime\n//     };\n\n//     return (\n//         <BookDiv>\n//             <div className=\"form-group\">\n//                 <label>From Date/Time:</label>\n//                 <DatePicker\n//                     selected={fromDateTime}\n//                     minDate={minDate}\n//                     startDate={fromDateTime}\n//                     endDate={toDateTime}\n//                     onChange={(date) => handleDateTimeChange(date, 'from')}\n//                     renderDay={renderDateTime}\n//                     excludeDates={excludeDates}\n//                     className=\"form-control\"\n//                     placeholderText=\"Chọn ngày/giờ nhận xe\"\n//                     showTimeSelect\n//                     dateFormat=\"MMMM d, yyyy h:mm aa\"\n//                 />\n//             </div>\n//             <div className=\"form-group\">\n//                 <label>To Date/Time:</label>\n//                 <DatePicker\n//                     selected={toDateTime}\n//                     minDate={fromDateTime || minDate} // Chỉ cho phép chọn ngày từ fromDateTime trở đi\n//                     startDate={fromDateTime}\n//                     endDate={toDateTime}\n//                     onChange={(date) => handleDateTimeChange(date, 'to')}\n//                     renderDay={renderDateTime}\n//                     className=\"form-control\"\n//                     placeholderText=\"Chọn ngày/giờ trả xe\"\n//                     filterDate={filterPassedDateTime}\n//                     showTimeSelect\n//                     dateFormat=\"MMMM d, yyyy h:mm aa\"\n//                 />\n//             </div>\n//             <button onClick={handleBooking}>Booking</button>\n//         </BookDiv>\n//     );\n// }\n\n// const BookDiv = styled.div`\n//   .form-group {\n//     margin-bottom: 1rem;\n//   }\n\n//   .form-label {\n//     margin-bottom: 0.5rem;\n//   }\n\n//   .form-control {\n//     border: 1px solid #ced4da;\n//     border-radius: 0.25rem;\n//     padding: 0.375rem 0.75rem;\n//     line-height: 1.5;\n//   }\n\n//   .custom-date-time.disabled-date-time {\n//     background-color: #f8d7da;\n//     color: #721c24;\n//     cursor: not-allowed;\n//     text-decoration: line-through;\n//     color: red;\n//   }\n// `;\n\n// export default BookingForm;\n\n// import React, { useContext, useEffect, useState } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import { InfoContext } from '../../contextProvider/ProviderInfo';\n// import Mic from '../Header/microphone-black-shape.svg';\n// import Modal from 'react-bootstrap/Modal';\n// import Button from 'react-bootstrap/Button';\n// import { BsMic } from 'react-icons/bs';\n\n// function App() {\n//     const { searchValue } = useContext(InfoContext);\n//     const location = useLocation();\n//     const searchRedirect = useNavigate();\n\n//     const [transcript, setTranscript] = useState('');\n//     const [isListening, setIsListening] = useState(false);\n//     const [showModal, setShowModal] = useState(false);\n//     const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n//     const startRecognition = () => {\n//         const recognition = new window.webkitSpeechRecognition();\n//         recognition.continuous = false;\n//         recognition.interimResults = false;\n//         recognition.lang = 'vi-VN';\n\n//         recognition.onstart = () => {\n//             setIsListening(true);\n//             setShowErrorMessage(false);\n//         };\n\n//         recognition.onresult = (event) => {\n//             const speechToText = event.results[0][0].transcript;\n//             setTranscript(speechToText);\n//         };\n\n//         recognition.onerror = (event) => {\n//             console.error('Lỗi nhận dạng giọng nói:', event.error);\n//             setShowErrorMessage(true);\n//         };\n\n//         recognition.onend = () => {\n//             recognition.stop();\n//             setIsListening(false);\n//         };\n\n//         recognition.start();\n//     };\n\n//     useEffect(() => {\n//         if (transcript !== '') {\n//             searchValue.set('searchValue', { search: transcript }, { path: '/' });\n\n//             if (location.pathname === '/Carlisting') {\n//                 window.location.reload();\n//             } else {\n//                 searchRedirect('/Carlisting');\n//             }\n//         }\n//     }, [transcript, searchValue, location.pathname, searchRedirect]);\n\n//     const handleStartRecognition = () => {\n//         setIsListening(true);\n//         setShowModal(true);\n//         startRecognition();\n//     };\n\n//     const handleCloseModal = () => {\n//         setShowModal(false);\n//     };\n\n//     return (\n//         <div>\n//             {!isListening && (\n//                 <button onClick={handleStartRecognition} style={{ marginRight: \"20px\", marginTop: \"-10px\" }}>\n//                     <BsMic />\n//                 </button>\n\n//             )}\n//             <Modal show={showModal} onHide={handleCloseModal}>\n//                 <Modal.Header closeButton>\n//                     <Modal.Title>Xin mời nói...</Modal.Title>\n//                 </Modal.Header>\n//                 <Modal.Body>\n//                     {showErrorMessage ? (\n//                         <p>Vui lòng kiểm tra mic và âm lượng của bạn</p>\n//                     ) : (\n//                         <div className=\"voice\">\n//                             <img\n//                                 className={`microphone ${isListening && 'isListening'}`}\n//                                 src={Mic}\n//                                 alt=\"microphone\"\n//                             />\n//                         </div>\n//                     )}\n//                 </Modal.Body>\n//             </Modal>\n//             <p>{transcript}</p>\n//         </div>\n//     );\n// }\n\n// export default App;\n\n// import React, { useContext, useEffect, useState } from 'react'; // Import các thành phần và hooks từ thư viện React\n// import { useLocation, useNavigate } from 'react-router-dom'; // Import hooks từ react-router-dom\n// import { InfoContext } from '../../contextProvider/ProviderInfo'; // Import context từ một đường dẫn tương đối\n// import Mic from '../Header/microphone-black-shape.svg'; // Import hình ảnh từ một đường dẫn tương đối\n// import Modal from 'react-bootstrap/Modal'; // Import component Modal từ thư viện react-bootstrap\n// import { BsMic } from 'react-icons/bs'; // Import icon từ react-icons\n\n// function App() {\n//     const { searchValue } = useContext(InfoContext); // Lấy giá trị từ context thông qua hook useContext\n//     const location = useLocation(); // Lấy thông tin vị trí hiện tại của trang qua hook useLocation\n//     const searchRedirect = useNavigate(); // Lấy hàm điều hướng đến một đường dẫn mới qua hook useNavigate\n\n//     const [transcript, setTranscript] = useState(''); // Khởi tạo state transcript và hàm setter setTranscript\n//     const [isListening, setIsListening] = useState(false); // Khởi tạo state isListening và hàm setter setIsListening\n//     const [showModal, setShowModal] = useState(false); // Khởi tạo state showModal và hàm setter setShowModal\n//     const [showErrorMessage, setShowErrorMessage] = useState(false); // Khởi tạo state showErrorMessage và hàm setter setShowErrorMessage\n\n//     const startRecognition = () => {\n//         // Khởi tạo đối tượng nhận dạng giọng nói\n//         const recognition = new window.webkitSpeechRecognition();\n//         recognition.continuous = false; // Thiết lập nhận dạng không liên tục\n//         recognition.interimResults = false; // Thiết lập không hiển thị kết quả tạm thời\n//         recognition.lang = 'vi-VN'; // Thiết lập ngôn ngữ nhận dạng là tiếng Việt\n\n//         recognition.onstart = () => {\n//             // Xử lý khi bắt đầu nhận dạng\n//             setIsListening(true); // Thiết lập isListening thành true\n//             setShowErrorMessage(false); // Ẩn thông báo lỗi nếu có\n//         };\n\n//         recognition.onresult = (event) => {\n//             // Xử lý khi có kết quả nhận dạng\n//             if (event.results[0].isFinal) {\n//                 const speechToText = event.results[0][0].transcript; // Lấy văn bản từ giọng nói nhận dạng được\n//                 setTranscript(speechToText); // Thiết lập giá trị transcript thành văn bản nhận dạng được\n//             }\n//         };\n\n//         recognition.onerror = (event) => {\n//             // Xử lý khi có lỗi nhận dạng\n//             console.error('Lỗi nhận dạng giọng nói:', event.error); // Log lỗi ra console\n//             setShowErrorMessage(true); // Hiển thị thông báo lỗi\n//         };\n\n//         recognition.onend = () => {\n//             // Xử lý khi kết thúc quá trình nhận dạng\n//             recognition.stop(); // Dừng quá trình nhận dạng\n//             setIsListening(false); // Thiết lập isListening thành false\n//         };\n\n//         recognition.start(); // Bắt đầu quá trình nhận dạng giọng nói\n//     };\n\n//     useEffect(() => {\n//         // Effect được gọi sau mỗi lần render và khi các biến phụ thuộc thay đổi\n//         if (transcript !== '') {\n//             // Nếu transcript không rỗng\n//             searchValue.set('searchValue', { search: transcript }, { path: '/' }); // Thiết lập giá trị searchValue trong context\n\n//             if (location.pathname === '/Carlisting') {\n//                 // Nếu đang ở đường dẫn '/Carlisting'\n//                 window.location.reload(); // Tải lại trang\n//             } else {\n//                 searchRedirect('/Carlisting'); // Điều hướng đến đường dẫn '/Carlisting'\n//             }\n//         }\n//     }, [transcript, searchValue, location.pathname, searchRedirect]);\n\n//     const handleStartRecognition = () => {\n//         // Xử lý khi bắt đầu quá trình nhận dạng\n//         setIsListening(true); // Thiết lập isListening thành true\n//         setShowModal(true); // Hiển thị modal\n//         startRecognition(); // Bắt đầu quá trình nhận dạng giọng nói\n//     };\n\n//     const handleCloseModal = () => {\n//         // Xử lý khi đóng modal\n//         setShowModal(false); // Thiết lập showModal thành false\n//     };\n\n//     return (\n//         <div>\n//             {!isListening && ( // Nếu không trong quá trình nhận dạng, render nút microphone\n//                 <button onClick={handleStartRecognition} style={{ marginRight: \"20px\", marginTop: \"-10px\" }}>\n//                     <BsMic /> {/* Hiển thị biểu tượng microphone */}\n//                 </button>\n//             )}\n\n//             <Modal show={showModal} onHide={handleCloseModal}>\n//                 {/* Modal hiển thị khi đang trong quá trình nhận dạng */}\n//                 <Modal.Header closeButton>\n//                     <Modal.Title>Xin mời nói...</Modal.Title>\n//                 </Modal.Header>\n//                 <Modal.Body>\n//                     {showErrorMessage ? ( // Nếu có lỗi nhận dạng, hiển thị thông báo lỗi\n//                         <p>Vui lòng kiểm tra mic và âm lượng của bạn</p>\n//                     ) : (\n//                         // Nếu không có lỗi nhận dạng, hiển thị hình ảnh microphone\n//                         <div className=\"voice\">\n//                             <img\n//                                 className={`microphone ${isListening && 'isListening'}`}\n//                                 src={Mic}\n//                                 alt=\"microphone\"\n//                             />\n//                         </div>\n//                     )}\n//                 </Modal.Body>\n//             </Modal>\n//             {isListening && transcript === '' && (\n//                 <p>Vui lòng kiểm tra mic và âm lượng của bạn</p>\n//             )}\n//             <p>{transcript}</p> {/* Hiển thị nội dung của biến transcript */}\n//         </div>\n//     );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/win10/Desktop/Khoaluantotnghiep/KLTN-react/src/components/Pages/test.js"],"sourcesContent":["// import axios from 'axios';\r\n// import React, { useState, useEffect } from 'react';\r\n// import DatePicker from 'react-datepicker';\r\n// import 'react-datepicker/dist/react-datepicker.css';\r\n// import styled from 'styled-components';\r\n\r\n// function BookingForm() {\r\n//     const [fromDateTime, setFromDateTime] = useState(null);\r\n//     const [toDateTime, setToDateTime] = useState(null);\r\n//     const [bookedDates, setBookedDates] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         let config = {\r\n//             method: 'get',\r\n//             maxBodyLength: Infinity,\r\n//             url: 'http://localhost/car/KLTN/carrentalAPI/Get_DateBooking.php?vid=2',\r\n//             headers: {},\r\n//         };\r\n\r\n//         axios\r\n//             .request(config)\r\n//             .then((response) => {\r\n//                 if (response.data.status === '200') {\r\n//                     setBookedDates(response.data.date);\r\n//                 }\r\n//             })\r\n//             .catch((error) => {\r\n//                 console.log(error);\r\n//             });\r\n//     }, []);\r\n\r\n//     const handleDateTimeChange = (selectedDateTime, field) => {\r\n//         if (field === 'from') {\r\n//             setFromDateTime(selectedDateTime);\r\n//             setToDateTime(null); // Reset toDateTime when changing fromDateTime\r\n//         } else if (field === 'to') {\r\n//             setToDateTime(selectedDateTime);\r\n//         }\r\n//     };\r\n\r\n//     const handleBooking = () => {\r\n//         console.log('From Date/Time:', fromDateTime);\r\n//         console.log('To Date/Time:', toDateTime);\r\n//     };\r\n\r\n//     const isBookedDateTime = (dateTime) => {\r\n//         return bookedDates.includes(dateTime.toISOString());\r\n//     };\r\n\r\n//     const renderDateTime = (dateTime) => {\r\n//         const isBooked = isBookedDateTime(dateTime.toISOString());\r\n//         const isFutureDateTime = dateTime > new Date();\r\n\r\n//         const dateTimeClassName = isBooked ? 'booked-date-time' : '';\r\n//         const additionalClass = isFutureDateTime ? '' : 'disabled-date-time';\r\n\r\n//         return (\r\n//             <div className={`custom-date-time ${dateTimeClassName} ${additionalClass}`}>\r\n//                 {dateTime.toLocaleString()}\r\n//             </div>\r\n//         );\r\n//     };\r\n\r\n//     const excludeDates = bookedDates.map((dateTime) => new Date(dateTime));\r\n//     const today = new Date();\r\n//     const minDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n\r\n//     const filterPassedDateTime = (dateTime) => {\r\n//         return dateTime > fromDateTime || !fromDateTime; // Hiển thị ngày/giờ sau fromDateTime hoặc không có fromDateTime\r\n//     };\r\n\r\n//     return (\r\n//         <BookDiv>\r\n//             <div className=\"form-group\">\r\n//                 <label>From Date/Time:</label>\r\n//                 <DatePicker\r\n//                     selected={fromDateTime}\r\n//                     minDate={minDate}\r\n//                     startDate={fromDateTime}\r\n//                     endDate={toDateTime}\r\n//                     onChange={(date) => handleDateTimeChange(date, 'from')}\r\n//                     renderDay={renderDateTime}\r\n//                     excludeDates={excludeDates}\r\n//                     className=\"form-control\"\r\n//                     placeholderText=\"Chọn ngày/giờ nhận xe\"\r\n//                     showTimeSelect\r\n//                     dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n//                 />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//                 <label>To Date/Time:</label>\r\n//                 <DatePicker\r\n//                     selected={toDateTime}\r\n//                     minDate={fromDateTime || minDate} // Chỉ cho phép chọn ngày từ fromDateTime trở đi\r\n//                     startDate={fromDateTime}\r\n//                     endDate={toDateTime}\r\n//                     onChange={(date) => handleDateTimeChange(date, 'to')}\r\n//                     renderDay={renderDateTime}\r\n//                     className=\"form-control\"\r\n//                     placeholderText=\"Chọn ngày/giờ trả xe\"\r\n//                     filterDate={filterPassedDateTime}\r\n//                     showTimeSelect\r\n//                     dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n//                 />\r\n//             </div>\r\n//             <button onClick={handleBooking}>Booking</button>\r\n//         </BookDiv>\r\n//     );\r\n// }\r\n\r\n// const BookDiv = styled.div`\r\n//   .form-group {\r\n//     margin-bottom: 1rem;\r\n//   }\r\n\r\n//   .form-label {\r\n//     margin-bottom: 0.5rem;\r\n//   }\r\n\r\n//   .form-control {\r\n//     border: 1px solid #ced4da;\r\n//     border-radius: 0.25rem;\r\n//     padding: 0.375rem 0.75rem;\r\n//     line-height: 1.5;\r\n//   }\r\n\r\n//   .custom-date-time.disabled-date-time {\r\n//     background-color: #f8d7da;\r\n//     color: #721c24;\r\n//     cursor: not-allowed;\r\n//     text-decoration: line-through;\r\n//     color: red;\r\n//   }\r\n// `;\r\n\r\n// export default BookingForm;\r\n\r\n\r\n// import React, { useContext, useEffect, useState } from 'react';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n// import { InfoContext } from '../../contextProvider/ProviderInfo';\r\n// import Mic from '../Header/microphone-black-shape.svg';\r\n// import Modal from 'react-bootstrap/Modal';\r\n// import Button from 'react-bootstrap/Button';\r\n// import { BsMic } from 'react-icons/bs';\r\n\r\n// function App() {\r\n//     const { searchValue } = useContext(InfoContext);\r\n//     const location = useLocation();\r\n//     const searchRedirect = useNavigate();\r\n\r\n//     const [transcript, setTranscript] = useState('');\r\n//     const [isListening, setIsListening] = useState(false);\r\n//     const [showModal, setShowModal] = useState(false);\r\n//     const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n\r\n//     const startRecognition = () => {\r\n//         const recognition = new window.webkitSpeechRecognition();\r\n//         recognition.continuous = false;\r\n//         recognition.interimResults = false;\r\n//         recognition.lang = 'vi-VN';\r\n\r\n//         recognition.onstart = () => {\r\n//             setIsListening(true);\r\n//             setShowErrorMessage(false);\r\n//         };\r\n\r\n//         recognition.onresult = (event) => {\r\n//             const speechToText = event.results[0][0].transcript;\r\n//             setTranscript(speechToText);\r\n//         };\r\n\r\n//         recognition.onerror = (event) => {\r\n//             console.error('Lỗi nhận dạng giọng nói:', event.error);\r\n//             setShowErrorMessage(true);\r\n//         };\r\n\r\n//         recognition.onend = () => {\r\n//             recognition.stop();\r\n//             setIsListening(false);\r\n//         };\r\n\r\n//         recognition.start();\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (transcript !== '') {\r\n//             searchValue.set('searchValue', { search: transcript }, { path: '/' });\r\n\r\n//             if (location.pathname === '/Carlisting') {\r\n//                 window.location.reload();\r\n//             } else {\r\n//                 searchRedirect('/Carlisting');\r\n//             }\r\n//         }\r\n//     }, [transcript, searchValue, location.pathname, searchRedirect]);\r\n\r\n//     const handleStartRecognition = () => {\r\n//         setIsListening(true);\r\n//         setShowModal(true);\r\n//         startRecognition();\r\n//     };\r\n\r\n//     const handleCloseModal = () => {\r\n//         setShowModal(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             {!isListening && (\r\n//                 <button onClick={handleStartRecognition} style={{ marginRight: \"20px\", marginTop: \"-10px\" }}>\r\n//                     <BsMic />\r\n//                 </button>\r\n\r\n//             )}\r\n//             <Modal show={showModal} onHide={handleCloseModal}>\r\n//                 <Modal.Header closeButton>\r\n//                     <Modal.Title>Xin mời nói...</Modal.Title>\r\n//                 </Modal.Header>\r\n//                 <Modal.Body>\r\n//                     {showErrorMessage ? (\r\n//                         <p>Vui lòng kiểm tra mic và âm lượng của bạn</p>\r\n//                     ) : (\r\n//                         <div className=\"voice\">\r\n//                             <img\r\n//                                 className={`microphone ${isListening && 'isListening'}`}\r\n//                                 src={Mic}\r\n//                                 alt=\"microphone\"\r\n//                             />\r\n//                         </div>\r\n//                     )}\r\n//                 </Modal.Body>\r\n//             </Modal>\r\n//             <p>{transcript}</p>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n// import React, { useContext, useEffect, useState } from 'react'; // Import các thành phần và hooks từ thư viện React\r\n// import { useLocation, useNavigate } from 'react-router-dom'; // Import hooks từ react-router-dom\r\n// import { InfoContext } from '../../contextProvider/ProviderInfo'; // Import context từ một đường dẫn tương đối\r\n// import Mic from '../Header/microphone-black-shape.svg'; // Import hình ảnh từ một đường dẫn tương đối\r\n// import Modal from 'react-bootstrap/Modal'; // Import component Modal từ thư viện react-bootstrap\r\n// import { BsMic } from 'react-icons/bs'; // Import icon từ react-icons\r\n\r\n// function App() {\r\n//     const { searchValue } = useContext(InfoContext); // Lấy giá trị từ context thông qua hook useContext\r\n//     const location = useLocation(); // Lấy thông tin vị trí hiện tại của trang qua hook useLocation\r\n//     const searchRedirect = useNavigate(); // Lấy hàm điều hướng đến một đường dẫn mới qua hook useNavigate\r\n\r\n//     const [transcript, setTranscript] = useState(''); // Khởi tạo state transcript và hàm setter setTranscript\r\n//     const [isListening, setIsListening] = useState(false); // Khởi tạo state isListening và hàm setter setIsListening\r\n//     const [showModal, setShowModal] = useState(false); // Khởi tạo state showModal và hàm setter setShowModal\r\n//     const [showErrorMessage, setShowErrorMessage] = useState(false); // Khởi tạo state showErrorMessage và hàm setter setShowErrorMessage\r\n\r\n//     const startRecognition = () => {\r\n//         // Khởi tạo đối tượng nhận dạng giọng nói\r\n//         const recognition = new window.webkitSpeechRecognition();\r\n//         recognition.continuous = false; // Thiết lập nhận dạng không liên tục\r\n//         recognition.interimResults = false; // Thiết lập không hiển thị kết quả tạm thời\r\n//         recognition.lang = 'vi-VN'; // Thiết lập ngôn ngữ nhận dạng là tiếng Việt\r\n\r\n//         recognition.onstart = () => {\r\n//             // Xử lý khi bắt đầu nhận dạng\r\n//             setIsListening(true); // Thiết lập isListening thành true\r\n//             setShowErrorMessage(false); // Ẩn thông báo lỗi nếu có\r\n//         };\r\n\r\n//         recognition.onresult = (event) => {\r\n//             // Xử lý khi có kết quả nhận dạng\r\n//             if (event.results[0].isFinal) {\r\n//                 const speechToText = event.results[0][0].transcript; // Lấy văn bản từ giọng nói nhận dạng được\r\n//                 setTranscript(speechToText); // Thiết lập giá trị transcript thành văn bản nhận dạng được\r\n//             }\r\n//         };\r\n\r\n//         recognition.onerror = (event) => {\r\n//             // Xử lý khi có lỗi nhận dạng\r\n//             console.error('Lỗi nhận dạng giọng nói:', event.error); // Log lỗi ra console\r\n//             setShowErrorMessage(true); // Hiển thị thông báo lỗi\r\n//         };\r\n\r\n//         recognition.onend = () => {\r\n//             // Xử lý khi kết thúc quá trình nhận dạng\r\n//             recognition.stop(); // Dừng quá trình nhận dạng\r\n//             setIsListening(false); // Thiết lập isListening thành false\r\n//         };\r\n\r\n//         recognition.start(); // Bắt đầu quá trình nhận dạng giọng nói\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         // Effect được gọi sau mỗi lần render và khi các biến phụ thuộc thay đổi\r\n//         if (transcript !== '') {\r\n//             // Nếu transcript không rỗng\r\n//             searchValue.set('searchValue', { search: transcript }, { path: '/' }); // Thiết lập giá trị searchValue trong context\r\n\r\n//             if (location.pathname === '/Carlisting') {\r\n//                 // Nếu đang ở đường dẫn '/Carlisting'\r\n//                 window.location.reload(); // Tải lại trang\r\n//             } else {\r\n//                 searchRedirect('/Carlisting'); // Điều hướng đến đường dẫn '/Carlisting'\r\n//             }\r\n//         }\r\n//     }, [transcript, searchValue, location.pathname, searchRedirect]);\r\n\r\n//     const handleStartRecognition = () => {\r\n//         // Xử lý khi bắt đầu quá trình nhận dạng\r\n//         setIsListening(true); // Thiết lập isListening thành true\r\n//         setShowModal(true); // Hiển thị modal\r\n//         startRecognition(); // Bắt đầu quá trình nhận dạng giọng nói\r\n//     };\r\n\r\n//     const handleCloseModal = () => {\r\n//         // Xử lý khi đóng modal\r\n//         setShowModal(false); // Thiết lập showModal thành false\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             {!isListening && ( // Nếu không trong quá trình nhận dạng, render nút microphone\r\n//                 <button onClick={handleStartRecognition} style={{ marginRight: \"20px\", marginTop: \"-10px\" }}>\r\n//                     <BsMic /> {/* Hiển thị biểu tượng microphone */}\r\n//                 </button>\r\n//             )}\r\n\r\n//             <Modal show={showModal} onHide={handleCloseModal}>\r\n//                 {/* Modal hiển thị khi đang trong quá trình nhận dạng */}\r\n//                 <Modal.Header closeButton>\r\n//                     <Modal.Title>Xin mời nói...</Modal.Title>\r\n//                 </Modal.Header>\r\n//                 <Modal.Body>\r\n//                     {showErrorMessage ? ( // Nếu có lỗi nhận dạng, hiển thị thông báo lỗi\r\n//                         <p>Vui lòng kiểm tra mic và âm lượng của bạn</p>\r\n//                     ) : (\r\n//                         // Nếu không có lỗi nhận dạng, hiển thị hình ảnh microphone\r\n//                         <div className=\"voice\">\r\n//                             <img\r\n//                                 className={`microphone ${isListening && 'isListening'}`}\r\n//                                 src={Mic}\r\n//                                 alt=\"microphone\"\r\n//                             />\r\n//                         </div>\r\n//                     )}\r\n//                 </Modal.Body>\r\n//             </Modal>\r\n//             {isListening && transcript === '' && (\r\n//                 <p>Vui lòng kiểm tra mic và âm lượng của bạn</p>\r\n//             )}\r\n//             <p>{transcript}</p> {/* Hiển thị nội dung của biến transcript */}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default App;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}